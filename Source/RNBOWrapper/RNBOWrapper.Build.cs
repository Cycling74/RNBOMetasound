// Copyright Epic Games, Inc. All Rights Reserved.

using UnrealBuildTool;
using System.IO;
using System.Text;

public class RNBOWrapper : ModuleRules
{
	string OperatorTemplate { get; set; }

	public RNBOWrapper(ReadOnlyTargetRules Target) : base(Target)
	{
		PCHUsage = ModuleRules.PCHUsageMode.UseExplicitOrSharedPCHs;

		var templateFile = Path.Combine(PluginDirectory, "Source", "RNBOWrapper", "Template", "MetaSoundOperator.cpp.in");
		using (StreamReader streamReader = new StreamReader(templateFile, Encoding.UTF8))
		{
			OperatorTemplate = streamReader.ReadToEnd();
		}

		var exportDir = Path.Combine(PluginDirectory, "Exports");
		string rnboDir = null;

		using (StreamWriter writer = new StreamWriter(Path.Combine(PluginDirectory, "Source", "RNBOWrapper", "Private", "RNBOWrapperGenerated.cpp")))
		{
			writer.WriteLine("//automatically generated by RNBOWrapper");
			writer.WriteLine("#include \"RNBO.cpp\" ");

			//detect exports, add includes and generate metasounds
			foreach (var path in Directory.GetDirectories(exportDir)) {
				//include export dir
				PrivateIncludePaths.Add(path);
				//set rnbo dir
				if (rnboDir == null) {
					rnboDir = Path.Combine(path, "rnbo");
				}

				//#include cpp files in export dir
				foreach (var f in Directory.GetFiles(path, "*.cpp")) {
					writer.WriteLine("#include \"{0}/{1}\" ", new DirectoryInfo(path).Name, Path.GetFileName(f));
				}
				writer.Write(CreateMetaSound(path));
			}
		}

		ExternalDependencies.Add(templateFile);
		
		PublicIncludePaths.AddRange(
			new string[] {
				// ... add public include paths required here ...
			}
			);
				

		PrivateIncludePaths.AddRange(
			new string[]
			{
				exportDir,
				Path.Combine(rnboDir),
				Path.Combine(rnboDir, "common"),
				Path.Combine(rnboDir, "src"),
				Path.Combine(rnboDir, "src", "3rdparty"),
			}
			);
		

		PublicDependencyModuleNames.AddRange(
			new string[]
			{
				"Core",
				"MetasoundFrontend",
				"MetasoundGraphCore",
				"MetasoundStandardNodes",
				// ... add other public dependencies that you statically link with here ...
			}
			);
			
		
		PrivateDependencyModuleNames.AddRange(
			new string[]
			{
				"CoreUObject",
				"Engine",
				"SignalProcessing",
				//Path.Combine(rnboDir, "RNBO.cpp"),
				// ... add private dependencies that you statically link with here ...	
			}
			);
		
		
		DynamicallyLoadedModuleNames.AddRange(
			new string[]
			{
				// ... add any modules that your module loads dynamically here ...
			}
			);

		PrivateDefinitions.Add("RNBO_NO_PATCHERFACTORY=1");
	}

	string CreateMetaSound(string path) {
		var m = OperatorTemplate;
		var ns = "RNBOOperator";
		var name = "FreqCycle";
		var displayName = "Freq Cycle";
		var description = "Test MetaSound";
		var category = "Utility";

		return OperatorTemplate
		.Replace("_OPERATOR_NAMESPACE_", ns)
		.Replace("_OPERATOR_NAME_", name)
		.Replace("_OPERATOR_DISPLAYNAME_", displayName)
		.Replace("_OPERATOR_DESCRIPTION_", description)
		.Replace("_OPERATOR_CATEGORY", category)
		;
	}
}
