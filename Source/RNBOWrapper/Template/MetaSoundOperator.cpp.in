// based on Copyright Epic Games, Inc. All Rights Reserved.
#include "Internationalization/Text.h"
#include "MetasoundExecutableOperator.h"
#include "MetasoundNodeRegistrationMacro.h"
#include "MetasoundParamHelper.h"
#include "MetasoundPrimitives.h"
#include "MetasoundTime.h"
#include "MetasoundAudioBuffer.h"
#include "DSP/Delay.h"
#include "MetasoundStandardNodesCategories.h"
#include "MetasoundFacade.h"
#include "RNBO.h"

#define LOCTEXT_NAMESPACE "MetasoundStandardNodes_OPERATOR_NAME_"

namespace Metasound
{
	namespace _OPERATOR_NAMESPACE_
	{
		_OPERATOR_PARAM_DECL_
			/*
		METASOUND_PARAM(InParamFreq, "Freq", "Freq.")
		METASOUND_PARAM(OutParamAudio, "Out 1", "Audio output 1.")
		*/
	}

	using namespace _OPERATOR_NAMESPACE_;
	class F_OPERATOR_NAME_Operator : public TExecutableOperator<F_OPERATOR_NAME_Operator>
	{
		private:
			RNBO::CoreObject CoreObject;
			RNBO::ParameterEventInterfaceUniquePtr ParamInterface;

			_OPERATOR_MEMBERS_DECL_
		public:
			static const FNodeClassMetadata& GetNodeInfo() {
				auto InitNodeInfo = []() -> FNodeClassMetadata
				{
					FNodeClassMetadata Info;
					Info.ClassName = { TEXT("UE"), "_OPERATOR_DISPLAYNAME_", TEXT("Audio") };
					Info.MajorVersion = 1;
					Info.MinorVersion = 1;
					Info.DisplayName = METASOUND_LOCTEXT("_OPERATOR_NAME__DisplayName", "_OPERATOR_DISPLAYNAME_");
					Info.Description = METASOUND_LOCTEXT("_OPERATOR_NAME__Description", "_OPERATOR_DESCRIPTION_");
					Info.Author = PluginAuthor;
					Info.PromptIfMissing = PluginNodeMissingPrompt;
					Info.DefaultInterface = GetVertexInterface();
					Info.CategoryHierarchy = { LOCTEXT("_OPERATOR_NAME__Category", "_OPERATOR_CATEGORY_") };
					return Info;
				};

				static const FNodeClassMetadata Info = InitNodeInfo();

				return Info;
			}

			static const FVertexInterface& GetVertexInterface() {
				static const FVertexInterface Interface(
						FInputVertexInterface(
							_OPERATOR_VERTEX_INPUTS_
							/*
							   TInputDataVertex<float>(METASOUND_GET_PARAM_NAME_AND_METADATA(InParamFreq), 0.0f)
							   TInputDataVertex<FAudioBuffer>(METASOUND_GET_PARAM_NAME_AND_METADATA(InParamAudioInput)),
							   TInputDataVertex<FTime>(METASOUND_GET_PARAM_NAME_AND_METADATA(InParamDelayTime), 1.0f),
							   TInputDataVertex<float>(METASOUND_GET_PARAM_NAME_AND_METADATA(InParamDryLevel), 0.0f),
							   TInputDataVertex<float>(METASOUND_GET_PARAM_NAME_AND_METADATA(InParamWetLevel), 1.0f),
							   TInputDataVertex<float>(METASOUND_GET_PARAM_NAME_AND_METADATA(InParamFeedbackAmount), 0.0f)
							   */
							),
						FOutputVertexInterface(
							_OPERATOR_VERTEX_OUTPUTS_
							/*
							TOutputDataVertex<FAudioBuffer>(METASOUND_GET_PARAM_NAME_AND_METADATA(OutParamAudio))
							   TOutputDataVertex<FAudioBuffer>(METASOUND_GET_PARAM_NAME_AND_METADATA(OutParamAudio))
							   */
							)
						);

				return Interface;
			}

			static TUniquePtr<IOperator> CreateOperator(const FCreateOperatorParams& InParams, FBuildErrorArray& OutErrors) {
				const FDataReferenceCollection& InputCollection = InParams.InputDataReferences;
				const FInputVertexInterface& InputInterface = GetVertexInterface().GetInputInterface();

				return MakeUnique<F_OPERATOR_NAME_Operator>(InParams, InParams.OperatorSettings, InputCollection, InputInterface, OutErrors);
			}

			F_OPERATOR_NAME_Operator(
					const FCreateOperatorParams& InParams,
					const FOperatorSettings& InSettings,
					const FDataReferenceCollection& InputCollection,
					const FInputVertexInterface& InputInterface,
					FBuildErrorArray& OutErrors
				) :
				CoreObject(RNBO::UniquePtr<RNBO::PatcherInterface>(RNBO::_OPERATOR_NAME_FactoryFunction(RNBO::Platform::get())()))
				_OPERATOR_MEMBERS_INIT_
			{
				CoreObject.prepareToProcess(InSettings.GetSampleRate(), InSettings.GetNumFramesPerBlock());
				//all params are handled in the audio thread
				ParamInterface = CoreObject.createParameterInterface(RNBO::ParameterEventInterface::NotThreadSafe, nullptr);
			}

			virtual FDataReferenceCollection GetInputs() const override
			{
				FDataReferenceCollection InputDataReferences;
				_OPERATOR_GET_INPUTS_
				return InputDataReferences;
			}

			virtual FDataReferenceCollection GetOutputs() const override
			{
				FDataReferenceCollection OutputDataReferences;
				_OPERATOR_GET_OUTPUTS_
				return OutputDataReferences;
			}

			void UpdateParam(RNBO::ParameterIndex i, float f) {
				double v = static_cast<double>(f);
				if (v != ParamInterface->getParameterValue(i)) {
					ParamInterface->setParameterValue(i, v);
				}
			}

			void Execute()
			{
				const std::array<float *, _OPERATOR_AUDIO_INPUT_COUNT_> ins = { _OPERATOR_AUDIO_INPUT_INIT_ };
				std::array<float*, _OPERATOR_AUDIO_OUTPUT_COUNT_> outs = { _OPERATOR_AUDIO_OUTPUT_INIT_ };

				int32 NumFrames = _OPERATOR_AUDIO_NUMFRAMES_MEMBER_->Num();

				_OPERATOR_PARAM_UPDATE_
				//UpdateParam(0, *Freq);
				CoreObject.process(ins.data(), ins.size(), outs.data(), outs.size(), NumFrames);
			}
	};

    using _OPERATOR_NAME_Node = FGenericNode<F_OPERATOR_NAME_Operator>;
	METASOUND_REGISTER_NODE(_OPERATOR_NAME_Node)
}

#undef LOCTEXT_NAMESPACE
